#!/usr/bin/env bash
# Launcher bash script that bootstraps CBT from source.
# (Some of the code for reporting missing dependencies and waiting for nailgun to come up is a bit weird.)
# This is inentionally kept as small as posible.
# Welcome improvements to this file:
# - reduce code size through better ideas
# - reduce code size by moving more of this into type-checked Java/Scala code (if possible without performance loss).
# - reduction of dependencies
# - performance improvements

# utility function to log message to stderr with stating the time
log () {
	msg=$1
	enabled=0
	while test $# -gt 0; do
	    case "$1" in
	    	"-Dlog=time") enabled=1 ;;
	    	"-Dlog=all") enabled=1 ;;
	    esac
	    shift
	done
	if [ $enabled -eq 1 ]; then
		which gdate 2>&1 > /dev/null
		gdate_installed=$?
		if [ $gdate_installed -eq 0 ]; then
			i=`gdate +"%S.%N"`
			echo "[$i] $msg" 1>&2
		fi
	fi
}

log "Checking for dependencies" $*

which javac 2>&1 > /dev/null
javac_installed=$?
if [ ! $javac_installed -eq 0 ]; then
	echo "You need to install javac! CBT needs it to bootstrap from Java sources into Scala." 1>&2
	exit 1
fi
javac_version=$(javac -version 2>&1 | cut -d ' ' -f 2)
javac_version_minor=$(echo -n $javac_version | cut -d '.' -f 2)
if [ ! "$javac_version_minor" -ge "8" ]; then
	echo "You need to install javac version 1.8 or greater! CBT currently relies on Java 8." 2>&1
	echo "Current javac version is $javac_version" 2>&1
	exit 1
fi
which ng 2>&1 > /dev/null
ng_installed=$?
which ng-server 2>&1 > /dev/null
ng_server_installed=$?
nailgun_installed=0
if [ ! $ng_installed -eq 0 ] || [ ! $ng_server_installed -eq 0 ]; then
	nailgun_installed=1
	echo "(Note: nailgun not found. It makes CBT faster! Try 'brew install nailgun'.)" 1>&2
fi
which realpath 2>&1 > /dev/null
realpath_installed=$?
which gcc 2>&1 > /dev/null
gcc_installed=$?
if [ ! $realpath_installed -eq 0 ] && [ ! $gcc_installed -eq 0 ]; then
	echo "You need realpath or gcc installed! CBT needs it to locate itself reliably." 1>&2
	exit 1
fi

which gpg 2>&1 > /dev/null
gpg_installed=$?
if [ ! $gpg_installed -eq 0 ]; then
	echo "(Note: gpg not found. In order to use publishSigned you'll need it.)" 1>&2
fi

NAILGUN_PORT=4444
NG="ng --nailgun-port $NAILGUN_PORT"

CWD=$(pwd)
_DIR=$(dirname $(readlink "$0") 2>/dev/null || dirname "$0" 2>/dev/null )

log "Find out real path. Build realpath if needed." $*

export CBT_HOME=$(dirname $($_DIR/realpath/realpath.sh $0))

export SCALA_VERSION="2.11.7"
export NAILGUN=$CBT_HOME/nailgun_launcher/
export STAGE1=$CBT_HOME/stage1/
export TARGET=target/scala-2.11/classes/
INDICATOR=$STAGE1$TARGET/cbt/Stage1.class
mkdir -p $NAILGUN$TARGET
mkdir -p $STAGE1$TARGET

which nc 2>&1 > /dev/null
nc_installed=$?

log "Check for running nailgun with nc." $*

server_up=1
if [ $nc_installed -eq 0 ]; then
	nc -z -n -w 1 127.0.0.1 $NAILGUN_PORT > /dev/null 2>&1
	server_up=$?
else
	echo "(Note: nc not found. It will make slightly startup faster.)" 1>&2
fi

if [ ! $nc_installed -eq 0 ] || [ ! $server_up -eq 0 ]; then
	log "Starting up nailgun server." $*
	# try to start nailgun-server, just in case it's not up
	ng-server 127.0.0.1:$NAILGUN_PORT >> $NAILGUN/target/nailgun.stdout.log 2>> $NAILGUN/target/nailgun.stderr.log & 
fi

log "Grabbing Scala classpath..." $*
# fetch / find scala jars
export SCALA_CLASSPATH=`$CBT_HOME/bootstrap_scala/bootstrap_scala $SCALA_VERSION`
if [ ! $? -eq 0 ]; then echo "Problem with bootstrap_scala" 1>&2; exit 1; fi

#gdate +"%T.%N"
# detect source changes in CBT itself
changed=0
for file in `ls $NAILGUN/* $STAGE1/*`
do  
	if [ $file -nt $INDICATOR ]
    then changed=1
    fi
done

compiles1=0
compiles2=0

log "Checking for source changes in CBT and maybe compiling." $*
# recompile CBT itself if needed
if [ ! $changed -eq 0 ]
then
	echo "Recompiling CBT. Detected source changes..." 1>&2
	javac -Xlint:deprecation -d $NAILGUN$TARGET `ls $NAILGUN/*.java`
	compiles1=$?
	
	rm $STAGE1$TARGET/cbt/*.class 2>/dev/null
	
	java -Xmx256M -Xms32M\
		-Xbootclasspath/a:$SCALA_CLASSPATH\
		-Dscala.usejavacp=true\
		-Denv.emacs=\
		scala.tools.nsc.Main\
		-deprecation\
		-feature\
		-cp $NAILGUN$TARGET\
		-d $STAGE1$TARGET\
		`ls $STAGE1/*.scala`
	compiles2=$?
	echo "Stopping nailgun" 1>&2
	$NG ng-stop >> $NAILGUN/target/nailgun.stdout.log 2>> $NAILGUN/target/nailgun.stderr.log & 
	echo "Restarting nailgun" 1>&2
	ng-server 127.0.0.1:$NAILGUN_PORT >> $NAILGUN/target/nailgun.stdout.log 2>> $NAILGUN/target/nailgun.stderr.log & 
fi

build ()
{ 
	CP=$STAGE1$TARGET:$SCALA_CLASSPATH
	if [ $nailgun_installed -eq 1 ] || [ "$1" = "publishSigned" ] || [ "$2" = "publishSigned" ] || [ "$1" = "direct" ] || [ "$2" = "direct" ]
	then
		log "Running JVM directly" $*
		# -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=localhost:5005
		java -cp $NAILGUN$TARGET cbt.NailgunLauncher $mainClass $CP "$CWD" $*
	else
		log "Running via nailgun." $*
		while true; do
			echo "Waiting for nailgun to start..." 1>&2
			log "Adding classpath." $*
			$NG ng-cp $NAILGUN$TARGET >> $NAILGUN/target/nailgun.stdout.log 2>> $NAILGUN/target/nailgun.stderr.log
			log "Checking if nailgun is up yet." $*
			$NG cbt.NailgunLauncher cbt.CheckAlive $CP "$CWD" $* >> $NAILGUN/target/nailgun.stdout.log 2>> $NAILGUN/target/nailgun.stderr.log
			alive=$?
			if [[ $alive -eq 33 ]]; then
				break
			else
				log "Nope. Sleeping for 1 second" $*
				sleep 1
			fi
		done
		log "Running $mainClass via Nailgun." $*
		$NG cbt.NailgunLauncher $mainClass $CP "$CWD" $*
	fi
	log "Done running $mainClass." $*
} 

log "run CBT and loop if desired. This allows recompiling CBT itself as part of compile looping." $*
if [ $compiles1 -eq 0 ] && [ $compiles2 -eq 0 ]
then
	if [ "$1" = "admin" ]; then
		mainClass=cbt.AdminStage1
	else
		mainClass=cbt.Stage1
	fi
	build $*
	if [ "$1" = "loop" ]
	then
		while true; do
			echo "======= Restarting CBT =======" 1>&2
			build $*
		done
	fi
fi

log "Exiting CBT" $*
